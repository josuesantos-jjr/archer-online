import fs from 'node:fs/promises'; // Usar promises para async/await
import path from 'node:path';
import { format } from 'date-fns'; // Fun√ß√µes de data √∫teis
import { analisarConversasDoDia } from './analiseConversaIA.ts'; // Adiciona a extens√£o .ts
// Tipos podem ser definidos aqui ou importados se existirem
// interface DisparoRegistro { /* ... */ }
// interface ChatMessage { date: string; time: string; type: 'User' | 'IA'; message: string; }
// Conta as conversas ativas
// Fun√ß√£o Refatorada para contar conversas respondidas em um dia espec√≠fico
async function contarConversasRespondidas(clientePath, dataRelatorio) {
    const dataAlvoString = format(dataRelatorio, 'dd/MM/yyyy'); // Formato consistente para compara√ß√£o
    const pastaHistorico = path.join(clientePath, 'Chats', 'Historico');
    let conversasRespondidas = 0;
    try {
        const chatIds = await fs.readdir(pastaHistorico);
        for (const chatId of chatIds) {
            const caminhoChatId = path.join(pastaHistorico, chatId);
            try {
                const stats = await fs.stat(caminhoChatId);
                if (!stats.isDirectory())
                    continue; // Pula se n√£o for diret√≥rio
                const arquivoChat = path.join(caminhoChatId, `${chatId}.json`); // Assume nome do arquivo = chatId.json
                try {
                    await fs.access(arquivoChat); // Verifica se o arquivo existe e √© acess√≠vel
                }
                catch {
                    continue; // Pula se n√£o existe ou n√£o acess√≠vel
                }
                const conteudoArquivo = await fs.readFile(arquivoChat, 'utf-8');
                const mensagens = JSON.parse(conteudoArquivo); // Usar tipo ChatMessage[] se definido
                let iaEnviouPrimeiro = false;
                let userRespondeuNoDia = false;
                for (const msg of mensagens) {
                    // Tenta parsear a data da mensagem (assumindo formato dd/MM/yyyy ou dd/MM/yy)
                    let dataMsg = null;
                    try {
                        const [dia, mes, anoStr] = msg.date.split('/');
                        const ano = anoStr.length === 2 ? parseInt(`20${anoStr}`) : parseInt(anoStr); // Converte ano de 2 d√≠gitos
                        if (dia && mes && ano) {
                            // Cuidado com m√™s (0-11)
                            dataMsg = new Date(ano, parseInt(mes) - 1, parseInt(dia));
                        }
                    }
                    catch (parseError) {
                        console.warn(`Erro ao parsear data "${msg.date}" no chat ${chatId}`);
                        continue; // Pula mensagem com data inv√°lida
                    }
                    // Verifica se a mensagem √© do dia do relat√≥rio
                    if (dataMsg && format(dataMsg, 'dd/MM/yyyy') === dataAlvoString) {
                        if (msg.type === 'IA') {
                            iaEnviouPrimeiro = true; // Marca que a IA iniciou (ou continuou) a conversa no dia
                        }
                        else if (msg.type === 'User' && iaEnviouPrimeiro) {
                            // Se o usu√°rio respondeu DEPOIS da IA no mesmo dia
                            userRespondeuNoDia = true;
                            break; // J√° sabemos que houve resposta neste chat, podemos ir para o pr√≥ximo
                        }
                    }
                }
                if (userRespondeuNoDia) {
                    conversasRespondidas++;
                }
            }
            catch (erro) {
                // Loga erro espec√≠fico do chat, mas continua processando outros
                console.error(`Erro ao processar chat ${chatId} para relat√≥rio: ${erro}`);
            }
        }
        console.log(`Relat√≥rio ${dataAlvoString}: Conversas respondidas encontradas: ${conversasRespondidas}`);
    }
    catch (erro) {
        // Erro ao ler o diret√≥rio principal de hist√≥rico
        console.error(`Erro ao ler a pasta ${pastaHistorico} para relat√≥rio: ${erro}`);
    }
    return conversasRespondidas;
}
// Fun√ß√£o para gerar o relat√≥rio di√°rio
// Fun√ß√£o Refatorada para criar e enviar o relat√≥rio di√°rio
async function criarEnviarRelatorioDiario(client, clientePath, dataRelatorio) {
    try {
        console.log('Iniciando a gera√ß√£o do relat√≥rio di√°rio...');
        // Usa a data recebida como argumento
        const dataFormatada = format(dataRelatorio, 'dd/MM/yyyy');
        const mesAtual = format(dataRelatorio, 'MMMM', { locale: require('date-fns/locale/pt-BR') }); // M√™s por extenso
        console.log('Carregando os prompts...');
        const promptsPath = path.join(clientePath, 'config', 'relatorio', '.promptsRelatorios');
        let promptsRaw = '';
        try {
            promptsRaw = await fs.readFile(promptsPath, 'utf-8'); // Usa readFile ass√≠ncrono
        }
        catch (err) {
            console.error(`Erro ao ler arquivo de prompts ${promptsPath}: ${err}. Usando prompts vazios.`);
            // Lidar com erro - talvez retornar ou usar prompts padr√£o vazios
        }
        const prompts = promptsRaw.split('\n').map((linha) => linha.trim()); // Adiciona tipo
        const promptRelatorioDiario = prompts.find((linha) => linha.startsWith('RELATORIO_DIARIO='))?.split('=')[1] || ''; // Adiciona tipo
        const promptAnalisarConversas = prompts.find((linha) => linha.startsWith('ANALISAR_CONVERSAS='))?.split('=')[1] || ''; // Adiciona tipo
        console.log(`Coletando dados de disparo para ${dataFormatada}...`);
        let disparosSucesso = 0;
        let disparosFalhaWpp = 0;
        let disparosFalhaEnvio = 0; // Contar outros erros se necess√°rio
        const logDiarioPath = path.join(clientePath, 'logs', `${format(dataRelatorio, 'yyyy-MM-dd')}.json`);
        try {
            // Tenta ler o arquivo de log diretamente
            const logContent = await fs.readFile(logDiarioPath, 'utf-8');
            const registros = JSON.parse(logContent); // Usar tipo DisparoRegistro[] se definido
            registros.forEach(reg => {
                if (reg.status === true) {
                    disparosSucesso++;
                }
                else if (reg.status === 'falha_wpp') { // Assumindo que falha_wpp √© registrado como status
                    disparosFalhaWpp++;
                }
                else {
                    disparosFalhaEnvio++; // Outras falhas
                }
            });
            console.log(`Dados do log ${logDiarioPath}: Sucesso=${disparosSucesso}, Falha WPP=${disparosFalhaWpp}, Falha Envio=${disparosFalhaEnvio}`);
        }
        catch (error) { // Adiciona tipo unknown
            // Se der erro na leitura (ex: arquivo n√£o existe), loga e continua com contagens zeradas
            // Verifica se √© um erro com c√≥digo e se o c√≥digo √© ENOENT
            if (error instanceof Error && 'code' in error && error.code === 'ENOENT') {
                console.log(`Arquivo de log di√°rio ${logDiarioPath} n√£o encontrado.`);
            }
            else {
                console.error(`Erro ao ler ou processar log di√°rio ${logDiarioPath}: ${error}`);
            }
        }
        // A l√≥gica de disparoTotal foi removida, pois n√£o parece √∫til no relat√≥rio di√°rio
        // e a forma de c√°lculo anterior estava incorreta.
        console.log(`Contando conversas respondidas para ${dataFormatada}...`);
        const conversasRespondidas = await contarConversasRespondidas(clientePath, dataRelatorio);
        console.log(`Conversas respondidas: ${conversasRespondidas}`);
        console.log(`Iniciando an√°lise de IA para ${dataFormatada}...`);
        // Chama a fun√ß√£o de an√°lise de IA
        const { resumoGeral: resumoGeralIA, resumosIndividuais: resumosIndividuaisIA } = await analisarConversasDoDia(clientePath, dataRelatorio);
        console.log(`An√°lise de IA conclu√≠da. Resumo Geral: ${resumoGeralIA ? 'OK' : 'Falhou/Vazio'}`);
        console.log('Montando o texto do relat√≥rio...');
        // Monta a mensagem do relat√≥rio
        const nomeCliente = path.basename(clientePath);
        let relatorioTexto = `üìä *Relat√≥rio Di√°rio - ${nomeCliente} (${dataFormatada})* üìä\n\n`;
        relatorioTexto += `üöÄ *Disparos Realizados:* ${disparosSucesso}\n`;
        if (disparosFalhaWpp > 0)
            relatorioTexto += `‚ùå *Falhas (Sem WPP):* ${disparosFalhaWpp}\n`;
        if (disparosFalhaEnvio > 0)
            relatorioTexto += `‚ö†Ô∏è *Falhas (Erro Envio):* ${disparosFalhaEnvio}\n`;
        relatorioTexto += `üí¨ *Conversas Respondidas:* ${conversasRespondidas}\n\n`;
        relatorioTexto += `ü§ñ *Resumo IA (Geral):*\n${resumoGeralIA || '(N√£o dispon√≠vel)'}\n\n`; // Usa o resumo real ou fallback
        // Opcional: Adicionar resumos individuais
        if (resumosIndividuaisIA && resumosIndividuaisIA.length > 0) {
            relatorioTexto += `\n*Resumos Individuais (IA):*\n`;
            resumosIndividuaisIA.forEach(r => {
                const chatIdSimple = r.chatId.split('@')[0]; // Mostra s√≥ o n√∫mero
                relatorioTexto += `\n_${chatIdSimple}_:\n${r.resumo}\n`;
            });
        }
        console.log('Salvando o relat√≥rio no arquivo JSON...');
        const relatorioSalvoPath = path.join(clientePath, 'logs', 'relatorios'); // Salvar em logs/relatorios
        const relatorioMensalFile = path.join(relatorioSalvoPath, `${format(dataRelatorio, 'yyyy-MM')}.json`); // Nome do arquivo YYYY-MM.json
        // L√™ o relat√≥rio mensal
        let relatorioMensal = {};
        try {
            // Tenta ler o relat√≥rio mensal diretamente
            const data = await fs.readFile(relatorioMensalFile, 'utf8');
            relatorioMensal = JSON.parse(data);
            console.log(`Relat√≥rio mensal carregado do arquivo: ${relatorioMensalFile}`);
        }
        catch (error) { // Adiciona tipo unknown
            // Se der erro (ex: n√£o existe), apenas loga e continua com relatorioMensal = {}
            if (error instanceof Error && 'code' in error && error.code === 'ENOENT') {
                console.log(`Arquivo de relat√≥rio mensal ${relatorioMensalFile} n√£o encontrado. Ser√° criado.`);
            }
            else {
                console.error(`Erro ao carregar o relat√≥rio mensal do arquivo ${relatorioMensalFile}: ${error}`);
            }
        }
        // Calcula a semana do m√™s
        // Adiciona os dados do dia ao relat√≥rio mensal (estrutura mais simples)
        relatorioMensal[dataFormatada] = {
            disparosSucesso,
            disparosFalhaWpp,
            disparosFalhaEnvio,
            conversasRespondidas,
            resumoGeralIA: resumoGeralIA || null,
            resumosIndividuaisIA: resumosIndividuaisIA && resumosIndividuaisIA.length > 0 ? resumosIndividuaisIA : null // Salva null se vazio
        };
        // Salva o relat√≥rio mensal
        // Garante que o diret√≥rio exista
        await fs.mkdir(relatorioSalvoPath, { recursive: true });
        // Salva o relat√≥rio mensal atualizado
        try {
            await fs.writeFile(relatorioMensalFile, JSON.stringify(relatorioMensal, null, 2));
            console.log(`Relat√≥rio di√°rio salvo no arquivo: ${relatorioMensalFile}`);
        }
        catch (error) {
            console.error(`Erro ao salvar o relat√≥rio di√°rio no arquivo: ${error}`);
        }
        // Carregar targetChatId de infoCliente.json
        const infoPath = path.join(clientePath, 'config', 'infoCliente.json');
        let targetChatId = '';
        try {
            const infoConfig = JSON.parse(await fs.readFile(infoPath, 'utf-8'));
            targetChatId = infoConfig.TARGET_CHAT_ID || '';
            if (targetChatId && !targetChatId.endsWith('@c.us') && !targetChatId.endsWith('@g.us')) {
                if (targetChatId.includes('-')) {
                    targetChatId += '@g.us';
                }
                else {
                    targetChatId += '@c.us';
                }
            }
        }
        catch (error) {
            console.error(`Erro ao ler infoCliente.json para TARGET_CHAT_ID: ${error}`);
        }
        // Envia o relat√≥rio se targetChatId foi definido
        if (targetChatId) {
            console.log(`Enviando relat√≥rio para ${targetChatId}...`);
            try {
                await client.sendText(targetChatId, relatorioTexto);
                console.log(`Relat√≥rio enviado para o chatId: ${targetChatId}`);
            }
            catch (error) {
                console.error(`Erro ao enviar o relat√≥rio para ${targetChatId}: ${error}`);
            }
        }
        else {
            console.log("TARGET_CHAT_ID n√£o configurado no .env do cliente, relat√≥rio n√£o enviado via WhatsApp.");
        }
        console.log('Relat√≥rio di√°rio gerado e enviado com sucesso!');
    }
    catch (error) {
        console.error(`Erro ao gerar relat√≥rio di√°rio: ${error}`);
    }
}
// Remove fun√ß√µes auxiliares antigas que n√£o s√£o mais necess√°rias
// function getSemanaDoMes(data: Date): number { ... }
// function lerHorarioRelatorio(clientePath: string): string { ... }
// function houveDisparoHoje(clientePath: string): boolean { ... }
// function horaDeExecutarRelatorio(horarioRelatorio: string): boolean { ... }
// Exporta a fun√ß√£o principal refatorada
export { criarEnviarRelatorioDiario };
// A fun√ß√£o 'dispararRelatorioDiario' foi removida pois a l√≥gica de gatilho est√° em disparo.ts
